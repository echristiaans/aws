AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Ascode.nl AWS Network Stack
Resources:
  vpc1:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: 10.20.0.0/16
      Tags:
        - Key: name
          Value: MyVPC
  pubsn1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc1
      CidrBlock: 10.20.10.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
  privsn1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc1
      CidrBlock: 10.20.20.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
  pubsn2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc1
      CidrBlock: 10.20.11.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
  privsn2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc1
      CidrBlock: 10.20.21.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
  privsn3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc1
      CidrBlock: 10.20.22.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
  pubsn3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc1
      CidrBlock: 10.20.12.0/24
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
  eip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  eip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  eip3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  eip4:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  igw1:
    Type: AWS::EC2::InternetGateway
  VPC1GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc1
      InternetGatewayId: !Ref igw1
  ngw1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip1.AllocationId
      SubnetId: !Ref pubsn1
  ngw2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip2.AllocationId
      SubnetId: !Ref pubsn2
  ngw3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip3.AllocationId
      SubnetId: !Ref pubsn3
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc1
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc1
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc1
  pubdefroute:
    Type: AWS::EC2::Route
    DependsOn: VPC1GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igw1
  privdefroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ngw1
  privdefroute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ngw2
  privdefroute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ngw3
  pubsn1RouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsn1
      RouteTableId: !Ref PublicRouteTable
  privsn1RouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsn1
      RouteTableId: !Ref PrivateRouteTable
  pubsn2RouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsn2
      RouteTableId: !Ref PublicRouteTable
  privsn2RouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsn2
      RouteTableId: !Ref PrivateRouteTable2
  pubsn3RouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsn3
      RouteTableId: !Ref PublicRouteTable
  privsn3RouteTableAssociation:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsn3
      RouteTableId: !Ref PrivateRouteTable3
  pubsn1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref pubsn1
      NetworkAclId: !GetAtt vpc1.DefaultNetworkAcl
  privsn1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privsn1
      NetworkAclId: !GetAtt vpc1.DefaultNetworkAcl
  pubsn2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref pubsn2
      NetworkAclId: !GetAtt vpc1.DefaultNetworkAcl
  privsn2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privsn2
      NetworkAclId: !GetAtt vpc1.DefaultNetworkAcl
  pubsn3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref pubsn3
      NetworkAclId: !GetAtt vpc1.DefaultNetworkAcl
  privsn3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privsn3
      NetworkAclId: !GetAtt vpc1.DefaultNetworkAcl
  sgwebportsfromany:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Web Ports Ingress
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "80"
        ToPort: "80"
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: "443"
        ToPort: "443"
        CidrIp: 0.0.0.0/0
  sgsshfromany:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Ingress
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "22"
        ToPort: "22"
        CidrIp: 0.0.0.0/0
  sgsshfromaegon:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Ingress from Aegon
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "22"
        ToPort: "22"
        CidrIp: 198.39.100.45/32
  sgsshfromhome:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Ingress from home IPs
      VpcId: !Ref vpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 217.100.96.50/32
  sgrdpfromaegon:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP Ingress from Aegon
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "3389"
        ToPort: "3389"
        CidrIp: 198.39.100.45/32
  sgrdpfromhome:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP Ingress from Home
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "3389"
        ToPort: "3389"
        CidrIp: 217.100.96.50/32
  sgsshfrombastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Ingress from home IPs
      VpcId: !Ref vpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.20.10.10/32
  sgk8sfromhome:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Kubernetes API Ports from trusted IPs
      VpcId: !Ref vpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "6443"
          ToPort: "6443"
          CidrIp: 10.20.10.10/32
  sgwithoutegress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group egress traffic
      VpcId: !Ref vpc1
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 127.0.0.1/32
  sgk8sports:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows ports required for Kubernetes
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "8080"
        ToPort: "8080"
        CidrIp: 10.20.0.0/16
      - IpProtocol: tcp
        FromPort: "2379"
        ToPort: "2379"
        CidrIp: 10.20.0.0/16
      - IpProtocol: tcp
        FromPort: "2380"
        ToPort: "2380"
        CidrIp: 10.20.0.0/16
      - IpProtocol: tcp
        FromPort: "6443"
        ToPort: "6443"
        CidrIp: 10.20.0.0/16
      - IpProtocol: tcp
        FromPort: "10250"
        ToPort: "10250"
        CidrIp: 10.20.0.0/16
      - IpProtocol: tcp
        FromPort: "30000"
        ToPort: "32767"
        CidrIp: 10.20.0.0/16
  sginternalcomms:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows internal communication between Kubernetes nodes
      VpcId: !Ref vpc1
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp: 10.20.0.0/16
  sgsqlfromwebservers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SQL Server ports from specified servers
      VpcId: !Ref vpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "1433"
          ToPort: "1433"
          CidrIp: 10.20.20.100/32
Outputs:
  vpc1ID:
    Description: VPC 1
    Value: !Ref vpc1
    Export:
      Name: !Sub "${AWS::StackName}-vpc1"
  eip4ID:
    Description: Elastic IP 4
    Value: !GetAtt eip4.AllocationId
    Export:
      Name: !Sub "${AWS::StackName}-eip4"
  pubsn1:
    Description: Public subnet 1
    Value: !Ref pubsn1
    Export:
      Name: !Sub "${AWS::StackName}-pubsn1"
  privsn1:
    Description: Private subnet 1
    Value: !Ref privsn1
    Export:
      Name: !Sub "${AWS::StackName}-privsn1"
  pubsn2:
    Description: Public subnet 2
    Value: !Ref pubsn2
    Export:
      Name: !Sub "${AWS::StackName}-pubsn2"
  privsn2:
    Description: Private subnet 2
    Value: !Ref privsn2
    Export:
      Name: !Sub "${AWS::StackName}-privsn2"
  pubsn3:
    Description: Public subnet 3
    Value: !Ref pubsn3
    Export:
      Name: !Sub "${AWS::StackName}-pubsn3"
  privsn3:
    Description: Private subnet 3
    Value: !Ref privsn3
    Export:
      Name: !Sub "${AWS::StackName}-privsn3"
  privroutetable1:
    Description: Prive Route Table 1
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-privrt1"
  privroutetable2:
    Description: Prive Route Table 2
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-privrt2"
  privroutetable3:
    Description: Prive Route Table 3
    Value: !Ref PrivateRouteTable3
    Export:
      Name: !Sub "${AWS::StackName}-privrt3"
  sgwebportsfromany:
    Description: The security group to use for public web servers
    Value: !GetAtt sgwebportsfromany.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgwebportsfromany"
  sgsshfromany:
    Description: The security group to use for public SSH access
    Value: !GetAtt sgsshfromany.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgsshfromany"
  sgsshfromhome:
    Description: The security group to use for SSH access from home
    Value: !GetAtt sgsshfromhome.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgsshfromhome"
  sgsshfrombastion:
    Description: The security group to use for SSH access from bastion
    Value: !GetAtt sgsshfrombastion.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgsshfrombastion"
  sgsshfromaegon:
    Description: The security group to use for SSH access from Aegon
    Value: !GetAtt sgsshfromaegon.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgsshfromaegon"
  sgk8sfromhome:
    Description: The security group to use for SSH access from home
    Value: !GetAtt sgk8sfromhome.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgk8sfromhome"
  sgk8sports:
    Description: The security group to use for Kubernetes ports between nodes
    Value: !GetAtt sgk8sports.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgk8sports"
  sginternalcomms:
    Description: The security group to Allow internal communication between Kubernetes nodes
    Value: !GetAtt sginternalcomms.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sginternalcomms"
  sgrdpfromhome:
    Description: The security group to use for RDP access from home
    Value: !GetAtt sgrdpfromhome.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgrdpfromhome"
  sgrdpfromaegon:
    Description: The security group to use for RDP access from home
    Value: !GetAtt sgrdpfromaegon.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgrdpfromaegon"
  sgsqlfromwebservers:
    Description: The security group to use for RDP access from home
    Value: !GetAtt sgsqlfromwebservers.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-sgsqlfromwebservers"
