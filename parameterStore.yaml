AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Ascode.nl IAM parameter store random password generator
Resources:
  LambdaExecRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "ec2.amazonaws.com"
                - "ssm.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "ssm_operations"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "ssm:*"
                Resource: "*"
      RoleName: !Sub |
       ${AWS::StackName}-password-generator-lambda-role
  LambdaExecKMS:
    Type: "AWS::KMS::Key"
    Properties:
      Description: "This key is to be used by the Password Generator Lambda Function"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "lambda-exec-password-generator-key"
        Statement:
          -
            Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:aws:iam:${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt LambdaExecRole.Arn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt LambdaExecRole.Arn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
  LambdaExecKmsAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}PasswordGeneratorLambdaKms'
      TargetKeyId: !Ref LambdaExecKMS
  PasswordGeneratorLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: lambda-functions-bucket
        S3Key: passwordgenerator.zip
      Handler: passwordgenerator.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecRole.Arn
      Runtime: 'python2.7'
      Timeout: 60
      FunctionName: !Sub '${AWS::StackName}-password-generator-cfn'
      Description: "This lambda function aims to generate random passwords and store them on EC2 Parameter Store"
  RandomMasterPassword:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt PasswordGeneratorLambdaFunction.Arn
      PasswordLength: 20
      Type: 'encrypt'
      ParameterName: !Join [ "-", [!Ref Environment, !Ref Stack, "app", "mysql", "master", "password"  ] ]
      ParameterDescription: !Join [ " ", [ " This parameter will be used in ", !Ref Environment, !Ref Stack, " APP Mysql Master Password Field"  ] ]
      KeyId: !Ref LambdaExecKMS
