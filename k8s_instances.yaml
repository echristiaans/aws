AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Ascode.nl AWS Instance Stack
Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack that contains the networking resources, such as the subnet and security group, that will be used in this stack
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: DefaultNetworkLayer
Mappings:
  RegionMap:
    eu-central-1:
      "centos73": "ami-2540f74a"
      "windows2016": "ami-5b7ac534"
      "ubuntu": "ami-7c412f13"
Resources:
  bastion1int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: bastion1 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.10.10
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-pubsn1"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfromhome"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfromaegon"
  bastion1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                mode: "000400"
                owner: "root"
                group: "root"
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Server.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource bastion1
                  runas=root
                mode: "000400"
                owner: "root"
                group: "root"
              /var/awslogs/etc/awslogs.conf:
                content: !Sub |
                  [general]
                  state_file = /var/awslogs/state/agent-state

                  [/var/log/syslog]
                  file = /var/log/syslog
                  log_group_name = ${instanceloggroup2}
                  log_stream_name = {instance_id}
                  datetime_format = %b %d %H:%M:%S
              /etc/hostname:
                content: "ac-sec-t01"
                owner: "root"
                group: "root"
                mode: "000644"
              /etc/hosts:
                content: !Sub |
                    127.0.0.1 localhost as-sec-t01

                    # The following lines are desirable for IPv6 capable hosts
                    ::1 ip6-localhost ip6-loopback
                    fe00::0 ip6-localnet
                    ff00::0 ip6-mcastprefix
                    ff02::1 ip6-allnodes
                    ff02::2 ip6-allrouters
                    ff02::3 ip6-allhosts
                    10.20.20.10 ac-k8m-t01
                    10.20.21.10 ac-k8m-t02
                    10.20.22.10 ac-k8m-t03
                    10.20.20.20 ac-k8w-t01
                    10.20.21.20 ac-k8w-t02
                    10.20.22.20 ac-k8w-t03
                owner: "root"
                group: "root"
                mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                git: []
                python: []
                software-properties-common: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      IamInstanceProfile:
        Ref: LogRoleInstanceProfile2
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-sec-t01"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref bastion1int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource bastion1 --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
          wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
          python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/apacheaccess.conf || error_exit 'Failed to run CloudWatch Logs agent setup'
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource bastion1 --region ${AWS::Region}
          apt-get upgrade -y
          apt-add-repository -y ppa:ansible/ansible
          apt-get update
          apt-get install -y ansible
  k8smaster1int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: master1 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.20.10
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-privsn1"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfrombastion"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sginternalcomms"
  k8smaster1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.Server.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource k8smaster1
                    runas=root
              /etc/hostname:
                content: "ac-k8m-t01"
                owner: "root"
                group: "root"
                mode: "000644"
              /etc/hosts:
                content: !Sub |
                    127.0.0.1 localhost as-k8m-t01

                    # The following lines are desirable for IPv6 capable hosts
                    ::1 ip6-localhost ip6-loopback
                    fe00::0 ip6-localnet
                    ff00::0 ip6-mcastprefix
                    ff02::1 ip6-allnodes
                    ff02::2 ip6-allrouters
                    ff02::3 ip6-allhosts
                    10.20.20.10 ac-k8m-t01
                    10.20.21.10 ac-k8m-t02
                    10.20.22.10 ac-k8m-t03
                    10.20.20.20 ac-k8w-t01
                    10.20.21.20 ac-k8w-t02
                    10.20.22.20 ac-k8w-t03
                owner: "root"
                group: "root"
                mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                python: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-k8m-t01"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref k8smaster1int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource k8smaster1 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource k8smaster1 --region ${AWS::Region}
          apt-get upgrade -y
  k8sworker1int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: worker1 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.20.20
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-privsn1"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfrombastion"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sginternalcomms"
  k8sworker1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.Server.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource k8sworker1
                    runas=root
              /etc/hostname:
                content: "ac-k8w-t01"
                owner: "root"
                group: "root"
                mode: "000644"
              /etc/hosts:
                content: !Sub |
                    127.0.0.1 localhost as-k8w-t01

                    # The following lines are desirable for IPv6 capable hosts
                    ::1 ip6-localhost ip6-loopback
                    fe00::0 ip6-localnet
                    ff00::0 ip6-mcastprefix
                    ff02::1 ip6-allnodes
                    ff02::2 ip6-allrouters
                    ff02::3 ip6-allhosts
                    10.20.20.10 ac-k8m-t01
                    10.20.21.10 ac-k8m-t02
                    10.20.22.10 ac-k8m-t03
                    10.20.20.20 ac-k8w-t01
                    10.20.21.20 ac-k8w-t02
                    10.20.22.20 ac-k8w-t03
                owner: "root"
                group: "root"
                mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                python: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-k8w-t01"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref k8sworker1int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource k8sworker1 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource k8sworker1 --region ${AWS::Region}
          apt-get upgrade -y
  k8smaster2int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: master2 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.21.10
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-privsn2"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfrombastion"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sginternalcomms"
  k8smaster2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.Server.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource k8smaster2
                    runas=root
                /etc/hostname:
                  content: "ac-k8m-t02"
                  owner: "root"
                  group: "root"
                  mode: "000644"
                /etc/hosts:
                  content: !Sub |
                      127.0.0.1 localhost as-k8m-t02

                      # The following lines are desirable for IPv6 capable hosts
                      ::1 ip6-localhost ip6-loopback
                      fe00::0 ip6-localnet
                      ff00::0 ip6-mcastprefix
                      ff02::1 ip6-allnodes
                      ff02::2 ip6-allrouters
                      ff02::3 ip6-allhosts
                      10.20.20.10 ac-k8m-t01
                      10.20.21.10 ac-k8m-t02
                      10.20.22.10 ac-k8m-t03
                      10.20.20.20 ac-k8w-t01
                      10.20.21.20 ac-k8w-t02
                      10.20.22.20 ac-k8w-t03
                  owner: "root"
                  group: "root"
                  mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                python: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-k8m-t02"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref k8smaster2int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource k8smaster2 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource k8smaster2 --region ${AWS::Region}
          apt-get upgrade -y
  k8sworker2int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: worker1 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.21.20
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-privsn2"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfrombastion"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sginternalcomms"
  k8sworker2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.Server.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource k8sworker2
                    runas=root
              /etc/hostname:
                content: "ac-k8w-t02"
                owner: "root"
                group: "root"
                mode: "000644"
              /etc/hosts:
                content: !Sub |
                    127.0.0.1 localhost as-k8w-t02

                    # The following lines are desirable for IPv6 capable hosts
                    ::1 ip6-localhost ip6-loopback
                    fe00::0 ip6-localnet
                    ff00::0 ip6-mcastprefix
                    ff02::1 ip6-allnodes
                    ff02::2 ip6-allrouters
                    ff02::3 ip6-allhosts
                    10.20.20.10 ac-k8m-t01
                    10.20.21.10 ac-k8m-t02
                    10.20.22.10 ac-k8m-t03
                    10.20.20.20 ac-k8w-t01
                    10.20.21.20 ac-k8w-t02
                    10.20.22.20 ac-k8w-t03
                owner: "root"
                group: "root"
                mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                python: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-k8w-t02"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref k8sworker2int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource k8sworker2 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource k8sworker2 --region ${AWS::Region}
          apt-get upgrade -y
  k8smaster3int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: master3 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.22.10
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-privsn3"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfrombastion"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sginternalcomms"
  k8smaster3:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.Server.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource k8smaster3
                    runas=root
              /etc/hostname:
                content: "ac-k8m-t03"
                owner: "root"
                group: "root"
                mode: "000644"
              /etc/hosts:
                content: !Sub |
                    127.0.0.1 localhost as-k8m-t03

                    # The following lines are desirable for IPv6 capable hosts
                    ::1 ip6-localhost ip6-loopback
                    fe00::0 ip6-localnet
                    ff00::0 ip6-mcastprefix
                    ff02::1 ip6-allnodes
                    ff02::2 ip6-allrouters
                    ff02::3 ip6-allhosts
                    10.20.20.10 ac-k8m-t01
                    10.20.21.10 ac-k8m-t02
                    10.20.22.10 ac-k8m-t03
                    10.20.20.20 ac-k8w-t01
                    10.20.21.20 ac-k8w-t02
                    10.20.22.20 ac-k8w-t03
                owner: "root"
                group: "root"
                mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                python: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-k8m-t03"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref k8smaster3int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource k8smaster3 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource k8smaster3 --region ${AWS::Region}
          apt-get upgrade -y
  k8sworker3int:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: worker3 NetworkInterface
      SourceDestCheck: "true"
      PrivateIpAddress: 10.20.22.20
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-privsn3"
      GroupSet:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgsshfrombastion"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sginternalcomms"
  k8sworker3:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config1:
            - "vars1"
          default:
            - ConfigSet: "config1"
        "vars1":
          fileconfig:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.Server.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource k8sworker3
                    runas=root
              /etc/hostname:
                content: "ac-k8w-t03"
                owner: "root"
                group: "root"
                mode: "000644"
              /etc/hosts:
                content: !Sub |
                    127.0.0.1 localhost as-k8w-t03

                    # The following lines are desirable for IPv6 capable hosts
                    ::1 ip6-localhost ip6-loopback
                    fe00::0 ip6-localnet
                    ff00::0 ip6-mcastprefix
                    ff02::1 ip6-allnodes
                    ff02::2 ip6-allrouters
                    ff02::3 ip6-allhosts
                    10.20.20.10 ac-k8m-t01
                    10.20.21.10 ac-k8m-t02
                    10.20.22.10 ac-k8m-t03
                    10.20.20.20 ac-k8w-t01
                    10.20.21.20 ac-k8w-t02
                    10.20.22.20 ac-k8w-t03
                owner: "root"
                group: "root"
                mode: "000644"
            commands:
              - command: "echo \"AllowAgentForwarding yes\" >> /etc/ssh/sshd_config && systemctl restart ssh"
                ignoreErrors: "true"
            packages:
              apt:
                python: []
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      DisableApiTermination: "false"
      ImageId:
        Fn::FindInMap:
          - "RegionMap"
          - Ref: "AWS::Region"
          - "ubuntu"
      InstanceType: "t2.small"
      KeyName: "AWSDeploy"
      Monitoring: "false"
      Tags:
        - Key: "Name"
          Value:  "ac-k8w-t03"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "standard"
          DeleteOnTermination: "true"
          VolumeSize: "100"
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId: !Ref k8sworker3int
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install python-setuptools python-pip -y
          easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/local/lib/python2*/dist-packages/aws_cfn_bootstrap*/init/ubuntu/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -c config1 -s ${AWS::StackId} --resource k8sworker3 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource k8sworker3 --region ${AWS::Region}
          apt-get upgrade -y
  apielb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-pubsn1"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-pubsn2"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-pubsn3"
      CrossZone: true
      Instances:
        - Ref: k8smaster1
        - Ref: k8smaster2
        - Ref: k8smaster3
      Listeners:
        - LoadBalancerPort: '6443'
          InstancePort: '6443'
          Protocol: TCP
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-sgk8sports"
      HealthCheck:
        Target: TCP:6443
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  AssociateEIP4:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-eip4"
      NetworkInterfaceId: !Ref bastion1int
  k8spodroute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Fn::ImportValue:
            !Sub "${NetworkStackName}-privrt1"
      DestinationCidrBlock: 10.200.3.0/24
      InstanceId: !Ref k8sworker1
  k8spodroute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Fn::ImportValue:
            !Sub "${NetworkStackName}-privrt2"
      DestinationCidrBlock: 10.200.4.0/24
      InstanceId: !Ref k8sworker2
  k8spodroute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Fn::ImportValue:
            !Sub "${NetworkStackName}-privrt3"
      DestinationCidrBlock: 10.200.5.0/24
      InstanceId: !Ref k8sworker3
  instanceloggroup2:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  InstanceLogRole2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceLogRole2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: InstanceLogRolePolicy2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            - logs:CreateLogStream
            Resource:
            - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::*
  LogRoleInstanceProfile2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceLogRole2
